library(forecast)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(cansim)
library(tidyverse)
library(forecast)
trend_ua <- ma(ua,order = 12, center = T)
trend_ua <- ma(ua,order = 12, centre = T)
#student number:1001311626, last digit 6, use Goods-producing sector data, second last digit is even, so data over over Jan 2000 to Dec 2019
ua = get_cansim_vector( "v2057813", start_time = "2000-01-01", end_time = "2019-12-01") %>%
pull(VALUE) %>% ts( start = c(2000,1), frequency = 12)
trend_ua <- ma(ua,order = 12, centre = T)
plot(as.ts(ua))
trend_ua <- ma(ua,order = 12, centre = T)
plot(as.ts(ua))
line(trend_ua)
trend_ua <- ma(ua,order = 12, centre = T)
plot(as.ts(ua))
lines(trend_ua)
plot(as.ts(ua))
lines(trend_ua)
trend_ua <- ma(ua,order = 12, centre = T)
plot(as.ts(ua))
lines(trend_ua)
detrend_ua <- ua/trend_ua
is.na(ua)
eval(is.na(ua))
ua_on <- na.omit(ua)
trend_ua <- ma(ua,order = 12, centre = T)
detrend_ua <- ua/trend_ua
?ma
trend_ua <- ma(ua,order = 12)
detrend_ua <- ua/trend_ua
ma(ua,order = 12)
na.omit(ma(ua,order =12))
trend_ua<- na.omit(trend_ua)
detrend_ua <- ua/trend_ua
trend_ua<- na.omit(trend_ua)
plot(as.ts(ua))
lines(trend_ua)
detrend_ua <- ua/trend_ua
detrend_ua
plot(as.ts(detrend_ua))
#seasonality
m_ua = t(matrix(data = detrend_ua, nrow = 12))
seasonal_ua = colMeans(m_ua, na.rm = T)
plot(as.ts(rep(seasonal_ua,12)))
#Remainder/random noise
remainder <- ua/(trend_ua*seasonal_ua)
plot(as.ts(remainder))
seasonal_adjusted = get_cansim_vector( "v2057604", start_time = "2000-01-01", end_time = "2019-12-01") %>%
pull(VALUE) %>% ts( start = c(2000,1), frequency = 12)
install.packages
install.packages('Metrics')
library(Metrics)
#own seasonally adjusted data
adjusted_seasonal <- ua/seasonal_ua
plot(seasonal_adjusted)
lines(adjusted_seasonal)
mae(seasonal_adjusted,adjusted_seasonal)
{plot(seasonal_adjusted)
lines(adjusted_seasonal)}
{plot(as.ts(ua))
lines(trend_ua)}
#student number:1001311626, last digit 6, use Goods-producing sector data, second last digit is even, so data over over Jan 2000 to Dec 2019
ua = get_cansim_vector( "v2057813", start_time = "2000-01-01", end_time = "2019-12-01") %>%
pull(VALUE) %>% ts( start = c(2000,1), frequency = 12)
#trend
trend_ua <- ma(ua,order = 12,centre=T)
trend_ua<- na.omit(trend_ua)
{plot(as.ts(ua))
lines(trend_ua)}
seasonal_adjusted
{plot(adjusted_seasonal)
lines(seasonal_adjusted)}
plot(as.ts(rep(seasonal_ua,12)))
install.packages('seasonal')
library(seasonal)
ua %>% seas(x11="") -> fit
autoplot(fit) +
ggtitle("X11 decomposition of electrical equipment index")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(cansim)
library(tidyverse)
library(forecast)
library(Metrics)
library(seasonal)
#X11
ua %>% seas(x11="") -> X11fit
#X11
ua %>% seas(x11="") -> X11fit
autoplot(X11fit) +
ggtitle("X11 decomposition of electrical equipment index")
autoplot(X11fit) +
ggtitle("X11 decomposition of Goods-producing sector(2000-2020) X11 plot")
autoplot(ua, series="Data") +
autolayer(trendcycle(X11fit), series="Trend") +
autolayer(seasadj(X11fit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Goods-producing sector(2000-2020) X11 plot") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
autoplot(X11fit) +
ggtitle("X11 decomposition of Goods-producing sector(2000-2020) X11 plot")
#SEATS
ua %>% seas() <- SEATSfit
#SEATS
ua %>% seas() -> SEATSfit
autoplot(SEATSfit) +
ggtitle("SEATS decomposition of Goods-producing sector(2000-2020)")
{plot(adjusted_seasonal)
lines(seasonal_adjusted)}
{plot(adjusted_seasonal)
lines(seasonal_adjusted,col='red')}
#own seasonally adjusted data
seasonal_adjusted_ua <- ua/seasonal_ua
{plots(seasonal_adjusted_online)
lines(seasonal_adjusted_ua,col='red')}
{plot(seasonal_adjusted_online)
lines(seasonal_adjusted_ua,col='red')}
#import seasonally adjusted data
seasonal_adjusted_online = get_cansim_vector( "v2057604", start_time = "2000-01-01", end_time = "2019-12-01") %>%
pull(VALUE) %>% ts( start = c(2000,1), frequency = 12)
#own seasonally adjusted data
seasonal_adjusted_ua <- ua/seasonal_ua
{plot(seasonal_adjusted_online)
lines(seasonal_adjusted_ua,col='red')}
#STL
elecequip %>% stl(t.window=12, s.window="periodic", robust=TRUE) -> STLfit
#STL
ua %>% stl(t.window=12, s.window="periodic", robust=TRUE) -> STLfit
autoplot(STLfit) +
ggtitle("STL decomposition of Goods-producing sector(2000-2020)")
autoplot(STLfit) +
ggtitle("STL decomposition of Goods-producing sector(2000-2020)")
autoplot(ua, series="Data") +
autolayer(trendcycle(STLfit), series="Trend") +
autolayer(seasadj(STLfit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Goods-producing sector(2000-2020) STL plot") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
#STL
log_ua <- log(ua)
log_ua %>% stl(t.window=12, s.window="periodic", robust=TRUE) -> STLfit
autoplot(STLfit) +
ggtitle("STL decomposition of Goods-producing sector(2000-2020)")
autoplot(log_ua, series="Data") +
autolayer(trendcycle(STLfit), series="Trend") +
autolayer(seasadj(STLfit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Goods-producing sector(2000-2020) STL plot") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
autoplot(X11fit) +
ggtitle("X11 decomposition of Goods-producing sector(2000-2020)")
plot(as.ts(rep(seasonal_ua,12)))
#trend
trend_ua <- ma(ua,order = 12,centre=T)
{plot(as.ts(ua))
lines(trend_ua)}
#find seasonal*remainder
detrend_ua <- ua/trend_ua
plot(as.ts(detrend_ua))
#seasonality
m_ua = t(matrix(data = detrend_ua, nrow = 12))
seasonal_ua = colMeans(m_ua, na.rm = T)
plot(as.ts(rep(seasonal_ua,12)))
#Remainder/random noise
remainder <- ua/(trend_ua*seasonal_ua)
plot(as.ts(remainder))
#import seasonally adjusted data
seasonal_adjusted_online = get_cansim_vector( "v2057604", start_time = "2000-01-01", end_time = "2019-12-01") %>%
pull(VALUE) %>% ts( start = c(2000,1), frequency = 12)
#import seasonally adjusted data
seasonal_adjusted_online = get_cansim_vector( "v2057604", start_time = "2000-01-01", end_time = "2019-12-01") %>%
pull(VALUE) %>% ts( start = c(2000,1), frequency = 12)
#own seasonally adjusted data
seasonal_adjusted_ua <- ua/seasonal_ua
{plot(seasonal_adjusted_online)
lines(seasonal_adjusted_ua,col='red')}
mae(seasonal_adjusted_online,adjusted_seasonal_ua)
mae(seasonal_adjusted_online,seasonal_adjusted_ua)
{plot(seasonal_adjusted_online)
lines(seasonal_adjusted_ua,col='red')}
{plot(seasadj(X11fit))
}
{plot(seasadj(X11fit))
lines(seasonal_adjusted_online)}
{plot(seasadj(X11fit))
lines(seasonal_adjusted_online),col='red'}
{plot(seasadj(X11fit))
lines(seasonal_adjusted_online), col='red'}
{plot(seasadj(X11fit))
lines(seasonal_adjusted_online,col='red')}
{plot(seasadj(SEATSfit))
lines(seasonal_adjusted_online,col='red')}
mae3 <- mae(seasadj(SEATSfit),seasonal_adjusted_online)
mae3
mae2 <- mae((seasadj(X11fit),seasonal_adjusted_online)
mae2 <- mae(seasadj(X11fit),seasonal_adjusted_online)
mae2
plot(ua)
mae4 <- mae(seasadj(expSTLfit),seasonal_adjusted_online)
#STL
log_ua <- log(ua)
log_ua %>% stl(t.window=12, s.window="periodic", robust=TRUE) -> STLfit
autoplot(STLfit) +
ggtitle("STL decomposition of Goods-producing sector(2000-2020)")
autoplot(log_ua, series="Data") +
autolayer(trendcycle(STLfit), series="Trend") +
autolayer(seasadj(STLfit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Goods-producing sector(2000-2020) STL plot") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
mae4 <- mae(seasadj(expSTLfit),seasonal_adjusted_online)
mae4 <- mae(seasadj(exp(STLfit)),seasonal_adjusted_online)
mae4 <- mae(exp(seasadj(STLfit)),seasonal_adjusted_online)
mae4
mae1
mae1 <- mae(seasonal_adjusted_online,seasonal_adjusted_ua)
mae1
mae2
mae3
mae4
{plot(as.ts(ua))
lines(trend_ua)
lines(detrend_ua)
lines(remainder)
lines(seasonal_ua)}
?decompose
decompose(ua)
de <- decompose(ua)
plot(de)
de <- decompose(ua,type = 'multiplicative')
plot(de)
autoplot(ua, series="Data") +
autolayer(trendcycle(SEATSfit), series="Trend") +
autolayer(seasadj(SEATSfit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Goods-producing sector(2000-2020) SEATS plot") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
#X11
ua %>% seas(x11="") -> X11fit
autoplot(X11fit) +
ggtitle("X11 decomposition of Goods-producing sector(2000-2020)")
autoplot(ua, series="Data") +
autolayer(trendcycle(X11fit), series="Trend") +
autolayer(seasadj(X11fit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Goods-producing sector(2000-2020) X11 plot") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
autoplot(X11fit) +
ggtitle("X11 decomposition of Goods-producing sector(2000-2020)")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(cansim)
library(tidyverse)
library(forecast)
library(Metrics)
library(seasonal)
library(ggplot2)
p <- ggplot(data = trend_ua, aes(x = Date, y = value)) +
geom_point(aes(color = site_no)) +
theme_bw()
p
p <- ggplot(data = trend_ua, aes(x = Date, y = value)) +
theme_bw()
p
as.ts(trend_ua)
trend_ua
?align_plots
ggplot(trend_ua)
ggplot(data = trend_ua,aes(x=data,y=value))
ggplot(data = trend_ua,aes(x=data))
level(trend_ua)
levels(trend_ua)
summary(trend_ua)
trend_ua
typeof(trend_ua)
?ggplot
p <- ggplot(data = trend_ua, aes(x = date, y))
p
ggplot(data = trend_ua,aes(x=data,y=value))
ggplot(data = trend_ua,aes(x=data,y)
)
ggplot(data = trend_ua,aes(x=date,y)
)
p1<-plot(as.ts(ua))
p2<-plot(as.ts(trend_ua))
p3<-plot(as.ts(rep(seasonal_ua,12)))
p4<-plot(as.ts(remainder))
p1
par(mfrow=(1,4))
par(mfrow=c(1,4))
p1<-plot(as.ts(ua))
p2<-plot(as.ts(trend_ua))
p3<-plot(as.ts(rep(seasonal_ua,12)))
p4<-plot(as.ts(remainder))
#trend
trend_ua <- ma(ua,order = 12,centre=T)
{plot(as.ts(ua))
lines(trend_ua)}
#find seasonal*remainder
detrend_ua <- ua/trend_ua
#plot(as.ts(detrend_ua))
#seasonality
m_ua = t(matrix(data = detrend_ua, nrow = 12))
seasonal_ua = colMeans(m_ua, na.rm = T)
plot(as.ts(rep(seasonal_ua,12)))
#Remainder/random noise
remainder <- ua/(trend_ua*seasonal_ua)
plot(as.ts(remainder))
p <- ggplot(data = trend_ua, aes(x = date, y))
par(mfrow=c(1,4))
p1<-plot(as.ts(ua))
p2<-plot(as.ts(trend_ua))
p3<-plot(as.ts(rep(seasonal_ua,12)))
p4<-plot(as.ts(remainder))
built_in_decomposition <- decompose(ua,type='multiplicative')
plot(built_in_decomposition)
#trend
trend_ua <- ma(ua,order = 12,centre=T)
{plot(as.ts(ua))
lines(trend_ua)}
#find seasonal*remainder
detrend_ua <- ua/trend_ua
#plot(as.ts(detrend_ua))
#seasonality
m_ua = t(matrix(data = detrend_ua, nrow = 12))
seasonal_ua = colMeans(m_ua, na.rm = T)
plot(as.ts(rep(seasonal_ua,12)))
#Remainder/random noise
remainder <- ua/(trend_ua*seasonal_ua)
plot(as.ts(remainder))
p <- ggplot(data = trend_ua, aes(x = date, y))
par(mfrow=c(4,1))
p1<-plot(as.ts(ua))
p2<-plot(as.ts(trend_ua))
p3<-plot(as.ts(rep(seasonal_ua,12)))
p4<-plot(as.ts(remainder))
built_in_decomposition <- decompose(ua,type='multiplicative')
plot(built_in_decomposition)
？autoplot
?autoplot
{plot(as.ts(ua))
lines(trend_ua)}
plot(as.ts(rep(seasonal_ua,12)))
ggplot(trend_ua,aex(x=Time,y))
ggplot(trend_ua,aes(x=Time,y))
?remainder
remainder(decompose(ua))
?auto.arima
auto.arima(R)
R <- remainder(decompose(ua))
auto.arima(R)
acf(R)
pacf(R)
pacf(R,na.omit=T)
pacf(na.omit(R))
acf(R)
acf(na.omit(R))
pacf(na.omit(R))
?decompose
?auto.arima
?par
{plot(seasadj(STLfit))
lines(seasonal_adjusted_online,col='red')}
{plot(exp(seasadj(STLfit)))
lines(seasonal_adjusted_online,col='red')}
{plot(exp(seasadj(STLfit)),ylab = 'value')
lines(seasonal_adjusted_online,col='red')}
{plot(seasonal_adjusted_online)
lines(seasonal_adjusted_ua,col='red')}
#trend
trend_ua <- ma(ua,order = 12,centre=T)
{plot(as.ts(ua))
lines(trend_ua)}
#find seasonal*remainder
detrend_ua <- ua/trend_ua
#plot(as.ts(detrend_ua))
#seasonality
m_ua = t(matrix(data = detrend_ua, nrow = 12))
seasonal_ua = colMeans(m_ua, na.rm = T)
plot(as.ts(rep(seasonal_ua,12)))
#Remainder/random noise
remainder <- ua/(trend_ua*seasonal_ua)
plot(as.ts(remainder))
p <- ggplot(data = trend_ua, aes(x = date, y))
par(mfrow=c(4,1))
plot(as.ts(ua))
plot(as.ts(trend_ua))
plot(as.ts(rep(seasonal_ua,12)))
plot(as.ts(remainder))
built_in_decomposition <- decompose(ua,type='multiplicative')
plot(built_in_decomposition)
remainder(ua)
R <- remainder(decompose(X11fit))
R <- remainder(X11fit)
acf(R)
pacf(R)
acf(na.omit(R))
pacf(na.omit(R))
acf(na.omit(R))
R1 <- remainder(X11fit)
acf(na.omit(R1))
pacf(na.omit(R1))
R2 <- remainder(SEATSfit)
acf(na.omit(R2))
pacf(na.omit(R2))
R3 <- remainder(decompose(ua))
acf(na.omit(R3))
pacf(na.omit(R3))
?seasadj
plot(as.ts(ua))
plot(as.ts(trend_ua))
plot(as.ts(rep(seasonal_ua,12)))
plot(as.ts(remainder))
plot(as.ts(ua))
plot(as.ts(trend_ua))
plot(as.ts(rep(seasonal_ua,12)))
plot(as.ts(remainder))
plot(as.ts(ua),ylab='observed')
plot(as.ts(trend_ua),ylab='trend')
plot(as.ts(rep(seasonal_ua,12)),ylab='seasonal')
plot(as.ts(remainder),ylab='remainder')
acf(na.omit(R),main='')
pacf(na.omit(R),main='')
acf(na.omit(R),main='')
R <- remainder(decompose(ua))
acf(na.omit(R),main='')
auto.arima(R)
R
auto.arima(R)
R <- remainder(X11fit)
acf(na.omit(R))
pacf(na.omit(R))
auto.arima(R)
R <- remainder(SEATSfit)
acf(na.omit(R),main = '')
pacf(na.omit(R), main = '')
acf(na.omit(R),main = '')
R <- remainder(X11fit)
acf(na.omit(R),main = '')
pacf(na.omit(R), main = '')
auto.arima(R)
auto.arima(R)
R <- remainder(decompose(ua))
auto.arima(R)
acf(na.omit(R),main = '')
R <- remainder(X11fit)
acf(na.omit(R),main = '')
?auto.arima
auto.arima(R)
R <- remainder(decompose(ua))
acf(na.omit(R),main='')
pacf(na.omit(R),main='')
auto.arima(R)
acf(na.omit(R),main='')
pacf(na.omit(R),main='')
acf(na.omit(R11),main = '')
R11 <- remainder(X11fit)
acf(na.omit(R11),main = '')
pacf(na.omit(R11), main = '')
pacf(na.omit(R),main='')
?seaosnal
?seasonal
??seasonal
